name: Docker Compose Actions Workflow
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: /var/lib/docker/volumes/planet-express_cargo-cache/_data
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/cache@v2
        with:
          path: /var/lib/docker/volumes/planet-express_target-cache/_data
          key: ${{ runner.os }}-target-debug-${{ hashFiles('**/Cargo.lock') }}
      - name: Docker complains if .env not present
        run: cp .env.example .env
      - name: Pull images
        run: docker-compose pull
      - name: Bring up the database
        run: docker-compose up -d db
      - name: Migrate database
        run: docker-compose up --exit-code-from app-migrations app-migrations
      - name: Clone test DB to avoid panics from each test trying to create database, no cli to fix no tty
        run: docker-compose exec -T db bash -c 'psql -U pexp -c "CREATE DATABASE pexp_test WITH TEMPLATE pexp OWNER pexp"'
      - name: Lint
        run: docker-compose run app cargo clippy -- -D warnings
      - name: Test
        run: docker-compose run app cargo test
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: test
    env:
      HEROKU_APP: planetexpres
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      IMAGE_BASE: registry.heroku.com/planetexpres
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: /var/lib/docker/volumes/planet-express_cargo-cache/_data
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/cache@v2
        with:
          path: /var/lib/docker/volumes/planet-express_target-cache/_data
          key: ${{ runner.os }}-target-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Docker compose version
        run: docker-compose version
      - name: Docker complains if .env not present
        run: cp .env.example .env
      - name: Pull images
        run: docker-compose pull
      - name: Bring up the database
        run: docker-compose up -d db
      - name: Migrate database
        run: docker-compose run app-migrations
      - name: Compile binary
        run: docker-compose run app cargo build --release
      - name: Compile manage binary
        run: docker-compose run app cargo build --release --bin manage
      - name: Build release image
        run: docker build --tag web . && docker tag web $IMAGE_BASE/web
      - name: Set up Heroku
        run: sudo apt update && sudo apt install curl -y && sudo curl https://cli-assets.heroku.com/install.sh | sh
      - name: Sign into heroku container registry
        run: heroku container:login
      - name: Push release image
        run: docker push registry.heroku.com/planetexpres/web
      - name: Release new image
        run: heroku container:release web
      - name: Run migrations
        run: heroku run bash -c "cd / && sqlx mig run"

